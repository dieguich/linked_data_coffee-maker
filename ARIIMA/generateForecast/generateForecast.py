#!/usr/bin/python

#subprocess is a module used to create "sub"-process, connect to its input, output and error
#pipes and obtain it exit status (0=subprocess exits with succesful).
import subprocess

import csv
import random
import sys, os
import traceback
import couchdb
import json
import time
from datetime import datetime
import datetime
import shutil

#output file name generated by R script
file_name_output = "forecast.csv"
#CouchDB url
server_address = "http://130.206.138.42:57984"

couch = couchdb.Server(server_address)



''' NoSQL '''
def saveInCouchDB(jsonToUpload, db):
  try:
    db.save(jsonToUpload)
    print jsonToUpload['_id'], jsonToUpload['_rev']
    print "saved_in_database"
  except:
    print "error in cocuhdb: "
    print sys.exc_info()[0]
    print traceback.format_exc()


''' Execute Script '''

"""
This function get the documents from a specific group.
Inside we create a dictionary (my_searches) whre the id,
date in python format and the content is allocated.
"""
def get_coffees_by_date(groupName, nDays, nHours):
	db    = couch['eco-aware_devices']
	dateKey     = 'date'
	timeKey     = 'time'
	coffees  = []
	firstDate = True
	tempDate = datetime.date(2000, 1, 1)
	dayIterator = nDays - 1
	couchdbView = 'getCoffesInfo/' + groupName + '_Predictions'

	for i in range(0,nDays*nHours):
		coffees.append(0)
		
	
	for row in db.view(couchdbView, descending=True): # we do use of a couchdb's view
		info = db.get(row.id)
		
		try:
			date = datetime.datetime.strptime(info[dateKey], "%Y-%m-%d").date()
			time = datetime.datetime.strptime(info[timeKey], "%H:%M:%S").time()
			floatTime = round(float(time.hour) + (time.minute/60.0)+(time.second/3600.0), 2)
			intTime = int(floatTime)
			if not(nHours==12 and (floatTime<7 or floatTime>19)):
				if dayIterator >= 0:
					if (tempDate != date):
						if not firstDate:
							dayIterator -= 1
							if dayIterator >= 0:
								coffees[12*dayIterator + intTime - 7] += 1
						else:
							firstDate = False
							coffees[12*dayIterator + intTime - 7] += 1
						tempDate = date
												
					else:
						coffees[12*dayIterator + intTime - 7] += 1
				else:
					exit
					
		except:
			print "Error: 'tempDate': "
			print tempDate
			print "'date': "
			print date
			print "Unexpected error:", sys.exc_info()[0]
	
	file_name_input = 'coffees_' + str(nDays) + '.csv'
	myfile = open(file_name_input, 'wb')
	wr = csv.writer(myfile, delimiter='\n', quoting=csv.QUOTE_NONE)
	wr.writerow(coffees)
	myfile.close()
	return coffees


"""
Execute the R script using the shell command "Rscript"
"""
def runScript():
	#I execute R script => it creates an other CSV file containg the prediction.
	try:
		retcode = subprocess.call(["Rscript", "timeseries_coffees.r"])
	except OSError, e:
		print e
		print "Unexpected error:", sys.exc_info()[0]


"""
Read from file CSV the forecast and put it inside a local varaible for processing.
"""
def readPredictionFromCVS():
	lines_files = list()
	try:
		f = open(file_name_output, 'rb')
		lines = csv.reader(f)
		for row in lines:
			lines_files.append(row)
		f.close()
	except:
		print "Error: to open file"
		print "Unexpected error:", sys.exc_info()[0]
	return lines_files


"""
Convert the forecast in a binary vector containing the working mode that coffee
machine should have to save energy.
For this method we use the 80% high of confident value.
The threshold to set the binary vector to 1 (that represents 'Standby' mode) is 3 coffees.
"""
def getPredictionFromHI80(threshold, lines_files):
	num_coffee_predicted = list()
	title = True
	for row in lines_files:
		if title != True:   
			if float(row[2]) > threshold:
				num_coffee_predicted.append(str(1))
			else:
				num_coffee_predicted.append(str(0))
		title = False
	return num_coffee_predicted


"""
Save the prediction (in binary format) in CouchDB.
"""
def saveDatainDB(prediction, groupName):
	db    = couch['predictions']
	dictTodump = {}
	try:
		dictTodump['prediction'] = ''.join(prediction)
		dictTodump['deviceID']   = groupName
		if len(db) > 0:
			found = False
			for docs in db:
				if ("deviceID" in db[docs] and db[docs]["deviceID"] == groupName):
					dictTodump['_rev'] = db[docs]['_rev']
					db[docs] = dictTodump	
					print db[docs]['_rev']
					found = True
			if found == False:
				saveInCouchDB(dictTodump, db)  			
	except:
		print "Error"
		print sys.exc_info()[0]
	print traceback.format_exc()


"""
Execute the script
"""
def executeScript(groupName, numDays, numHours, threshold):
	
	#get coffees of 23 days before
	get_coffees_by_date(groupName, numDays, numHours)

	#execute R script
	runScript()

	#read prediction from forecast file
	lines_files = readPredictionFromCVS()

	#forcast processing
	num_coffee_predicted = list()
	num_coffee_predicted = getPredictionFromHI80(threshold, lines_files)

	#save in db the prediction
	saveDatainDB(num_coffee_predicted, groupName)


if __name__ == "__main__":
	#Arguments: groupName, numDays, numHours, threshold
	executeScript("MORElab", 23, 12, 3)

	executeScript("Life", 23, 12, 3)

	executeScript("Mobility", 23, 12, 3)

	#executeScript("ServiciosGenerales", 23, 12, 3)
